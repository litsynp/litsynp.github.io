<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Django REST Framework on litsynp.log</title><link>https://blog.litsynp.com/tags/django-rest-framework/</link><description>Recent content in Django REST Framework on litsynp.log</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 05 Jan 2022 23:31:28 -0800</lastBuildDate><atom:link href="https://blog.litsynp.com/tags/django-rest-framework/index.xml" rel="self" type="application/rss+xml"/><item><title>[DRF] Serializer에 writable non-model field 추가하기</title><link>https://blog.litsynp.com/posts/2021/01/05/drf-serializer%EC%97%90-writable-non-model-field-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link><pubDate>Wed, 05 Jan 2022 23:31:28 -0800</pubDate><guid>https://blog.litsynp.com/posts/2021/01/05/drf-serializer%EC%97%90-writable-non-model-field-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid><description>문제 Django 및 DRF에서 model에 정의하지 않은 필드를 POST / PUT용 serializer에 추가하고 싶을 때가 있다. 그냥 serializers.CharField()로 추가하면 unexpected keyword라고 뜨면서 추가할 수 없는 문제가 발생한다.
해결법 Serializer에 추가해둔 필드를 validate 메소드에서 model 생성에 사용되지 않도록 pop() 시켜준다.
class UserSerializer(serializers.ModelSerializer): non_model_field = serializers.CharField(max_length=300, allow_blank=True, write_only=True) class Meta: model = User fields = (&amp;#39;id&amp;#39;, &amp;#39;username&amp;#39;, &amp;#39;password&amp;#39;, &amp;#39;non_model_field&amp;#39;) def validate(self, attrs): # ... attrs.</description></item><item><title>[Python] super() 이용해서 기존 메소드 이용하기</title><link>https://blog.litsynp.com/posts/2021/02/10/python-super-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-%EA%B8%B0%EC%A1%B4-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0/</link><pubDate>Wed, 10 Feb 2021 00:00:00 +0900</pubDate><guid>https://blog.litsynp.com/posts/2021/02/10/python-super-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-%EA%B8%B0%EC%A1%B4-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0/</guid><description>Why use it? 프로젝트에서 Django REST Framework를 사용하고 있는데, serializer나 viewset을 사용할 때, 특히 ModelViewSet 을 override할 때 HTTP 메소드에 따른 함수를 수정하고 싶을 때가 있다.
그럴 때 특정 분기에 따라 override하기 전의 클래스 메소드를 사용하고 싶은 때가 있다.
예시는 다음과 같다.
# ViewSet 안의 메소드 def destroy(self, request, *args, **kwargs): user_id = int(self.kwargs.get(&amp;#39;pk&amp;#39;)) # 로그인한 사용자와 조회하려는 사용자의 ID가 일치한지 확인 if self.request.user.id == user_id: return super(UserViewSet, self).</description></item></channel></rss>