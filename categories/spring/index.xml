<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Spring on litsynp.log</title><link>https://blog.litsynp.com/categories/spring/</link><description>Recent content in Spring on litsynp.log</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 11 Feb 2022 23:30:25 -0800</lastBuildDate><atom:link href="https://blog.litsynp.com/categories/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>[Spring Boot] External API Call</title><link>https://blog.litsynp.com/posts/2022/02/11/spring-boot-external-api-call/</link><pubDate>Fri, 11 Feb 2022 23:30:25 -0800</pubDate><guid>https://blog.litsynp.com/posts/2022/02/11/spring-boot-external-api-call/</guid><description>RestTemplate is commonly used for external API call in Spring.
But from Spring 5, WebClient in WebFlux is preferred over RestTemplate.
First, add this dependency to build.gradle.
// build.gradle // ... implementation &amp;#39;org.springframework.boot:spring-boot-starter-webflux&amp;#39; // ... Then create a bean to inject into different classes.
package com.litsynp.application.domain.global.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.reactive.function.client.WebClient; @Configuration public class WebClientConfig { @Bean public WebClient.Builder getWebClientBuilder() { return WebClient.builder(); } } Finally, inject WebClientBuilder into the service and build the web client to call the external API.</description></item></channel></rss>