<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Spring Batch on litsynp.log</title><link>https://blog.litsynp.com/categories/spring-batch/</link><description>Recent content in Spring Batch on litsynp.log</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 04 Jun 2022 23:55:52 +0900</lastBuildDate><atom:link href="https://blog.litsynp.com/categories/spring-batch/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Batch와 주요 클래스 정리</title><link>https://blog.litsynp.com/posts/2022/06/04/spring-batch-summary/</link><pubDate>Sat, 04 Jun 2022 23:55:52 +0900</pubDate><guid>https://blog.litsynp.com/posts/2022/06/04/spring-batch-summary/</guid><description>배치 개발 시나리오 배치의 일반적인 시나리오는 읽기 - 처리 - 쓰기로 나누어진다.
배치 관련 객체 관계도 Job과 Step은 1:M, Step과 ItemReader, ItemProcessor, ItemWriter는 1:1 관계를 갖는다.
Job이라는 하나의 큰 일감(Job)에 여러 단계(Step)를 두고, 각 단계를 배치의 기본 흐름대로 구현한다.
배치 관련 클래스 정의 Job Job 은 배치 처리 과정을 하나의 단위로 만들어 표현한 객체이다. 전체 배치 처리에 있어 항상 최상단 계층에 있다. Job 객체는 여러 Step 인스턴스를 포함하는 컨테이너다.
Job 객체를 만드는 빌더는 여러 개가 있다.</description></item></channel></rss>