<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>today-i-read on litsynp.log</title><link>https://blog.litsynp.com/categories/today-i-read/</link><description>Recent content in today-i-read on litsynp.log</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 21 Jan 2022 23:50:40 -0800</lastBuildDate><atom:link href="https://blog.litsynp.com/categories/today-i-read/index.xml" rel="self" type="application/rss+xml"/><item><title>[TIR] About web.xml</title><link>https://blog.litsynp.com/posts/2022-01-21/</link><pubDate>Fri, 21 Jan 2022 23:50:40 -0800</pubDate><guid>https://blog.litsynp.com/posts/2022-01-21/</guid><description>Today I Read Reference https://tlatmsrud.tistory.com/35
What I Learned web.xml이란 웹 애플리케이션의 설정파일이다. DD (Deployment Description, 배포 설명자) 라고 불린다. DD는 웹 애플리케이션 실행 시 메모리에 로드된다. web.xml이란, 웹 애플리케이션을 실행시킬 때 함께 올라가야 할 설정들을 정의해놓은 파일이다. 설정이란 web.xml은 크게 세 개의 설정을 한다. DispatcherServlet: 클라이언트의 요청을 전달 받아 처리 ContextLoaderListener: 웹 애플리케이션 컨텍스트 단위 설정을 로드 Filter: 클라이언트에서 온 요청을 DispatcherServlet이 받기 전 거치는 과정 처리 DispatcherServlet DispatcherServlet은 클라이언트의 요청을 전달받아 요청을 처리하는 객체이다.</description></item><item><title>[TIR] Redis vs Kafka vs RabbitMQ</title><link>https://blog.litsynp.com/posts/2022-01-07/</link><pubDate>Fri, 07 Jan 2022 23:38:42 -0800</pubDate><guid>https://blog.litsynp.com/posts/2022-01-07/</guid><description>Today I Read Link https://blog.devgenius.io/redis-vs-kafka-vs-rabbitmq-e935ebbc7ec
What I Learned Means of communictaion between microservices: sync. and async. REST for sync. MQ for async. Considerations for choosing the right MQ: Broker scale: # messages / sec. Data persistency: the ability to recover messages Consumer capability: Capability for 1:1 or 1:N Different message brokers and their purposes RabbitMQ (AMQP) for complex routing Kafka for large amounts of data Redis for short-lived messages</description></item></channel></rss>